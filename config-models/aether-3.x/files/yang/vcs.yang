module vcs {
  namespace "http://opennetworking.org/aether/vcs";
  prefix sl;

  import template{ prefix vt; }
  import device-model-list{ prefix dml; }
  import network{ prefix net; }
  import upf-list{ prefix upf; }
  import ap-list{ prefix apl; }
  import application{ prefix app; }
  import device-group{ prefix dg; }

  organization "Open Networking Foundation.";
  contact "Scott Baker";
  description 
    "An Aether Virtual Cellular Service (VCS) is
     used to connect UE devices with applications";

  revision "2021-06-02" {
    description "An Aether Virtual Cellular Service";
    reference "RFC 6087";
  }

  typedef vcs-id {
        type string {
            length 1..32;
        }
  }

  container vcs {
    description "The top level container";

    list vcs {
      key "id";
      description
        "List of virtual cellular services";

      leaf id {
        type vcs-id;
        description "ID for this vcs.";
      }

      leaf display-name {
        type string {
            length 1..80;
        }
        description "display name to use in GUI or CLI";
      }

      leaf device-group {
        type leafref {
          path "/dg:device-group/dg:device-group/dg:id";
        }          
        description
          "Link to device group";
      }      

      leaf template {
        type leafref {
          path "/vt:template/vt:template/vt:id";
        }          
        description
          "Link to user vcs template";
      }

      leaf network {
        type leafref {
          path "/net:network/net:network/net:id";
        }          
        description
          "Link to network for this vcs";
      }

      leaf device-model-list {
        type leafref {
          path "/dml:device-model-list/dml:device-model-list/dml:id";
        }          
        description
          "Link to network for this device-model-list";
      }      

      list application {
        key "application";   
        leaf application {
          type leafref {
            path "/app:application/app:application/app:id";
          }
          description
            "Link to application";
        }
        leaf allow {
          type boolean;
          default true;
          description
            "Allow or deny this application";
        }
        description
          "An ordered list of applications to allow and deny. The deny rules
           will be executed first, followed by the allow rules. The first rule
           to match is returned. An implicit DENY ALL lies at the end.";
      }      

      leaf upf {
        type leafref {
          path "/upf:upf-list/upf:upf-list/upf:id";
        }          
        description
          "Link to user plane that implements this vcf";
      }

      leaf ap {
        type leafref {
          path "/apl:ap-list/apl:ap-list/apl:id";
        }          
        description
          "Link to access-point list";
      }

      leaf description {
        type string {
          length 1..100;
        }
        description "description of this vcs";
      }
    }
  } 
}
