# SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

# Default values for all Aether Helm charts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  fullnameOverride: "onos"
  nameOverride: ""
  image:
    registry: ""
    tag: ""
  store:
    consensus:
      enabled: true
      name: ""
      image:
        registry: ""
        repository: atomix/atomix-raft-storage-node
        tag: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
      clusters: 1
      replicas: 1
      partitions: 1
      persistence:
        storageClass: ""
        storageSize: 1Gi
  # Deprecated: use 'store' instead
  storage:
    controller: "atomix-controller.kube-system.svc.cluster.local:5679"
    consensus:
      enabled: false
      name: ""
      type: raft
      image: ""
      imagePullPolicy: IfNotPresent
      partitions: 1
      replicas: 1
      partitionsPerCluster: 1
      clusters: 1

import:
  onos-topo:
    enabled: true
  onos-config:
    enabled: true
  onos-gui:
    enabled: false
  onos-cli:
    enabled: true
  aether-roc-api:
    enabled: true
  aether-roc-gui:
    v2_1:
      enabled: false
    v3:
      enabled: true
  sdcore-adapter:
    v2_1:
      enabled: true
    v3:
      enabled: true
  sdcore-test-dummy:
    enabled: true
  grafana:
    enabled: true #also enable the proxy below
  prometheus:
    enabled: true #also enable the proxy below

# ONOS-TOPO
onos-topo:
  store:
    consensus:
      enabled: false
  # Deprecated: use 'store' instead
  storage:
    consensus:
      enabled: false

# ONOS-GUI
onos-gui: {}

# ONOS-CLI
onos-cli:
  postInstall:
    topo: spgw-1-topo-entities.json
# Use "--set onos-cli.postInstall=null" to disable

# Aether ROC API
aether-roc-api: {}

# Aether ROC GUI
aether-roc-gui-v3:
  grafana:
    proxyEnabled: true
    service: aether-roc-umbrella-grafana # the grafana hostname - use FQDN for other namespaces
  prometheus:
    proxyEnabled: true
    service: aether-roc-umbrella-prometheus-server

# SD-Core Adapter
sdcore-adapter-v21:
  nameOverride: sdcore-adapter-v21
  fullnameOverride: sdcore-adapter-v21
  prometheusEnabled: false

sdcore-adapter-v3:
  nameOverride: sdcore-adapter-v3
  fullnameOverride: sdcore-adapter-v3
  prometheusEnabled: false

grafana:
  orgs:
    - "Acme Inc"
    - "Starbucks"
  tidyUpPostInstall: true
  grafana.ini:
    log:
      level: debug
    server:
      domain: aether-roc-gui
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      serve_from_sub_path: true
    auth.ldap:
      enabled: true
      config_file: /etc/grafana/ldap.toml
    auth.generic_oauth:
      enabled: true
      client_id: aether-roc-gui
      client_secret: YWV0aGVyLXJvYy1ndWkK
      scopes: "openid profile email groups"
#      empty_scopes: false
      auth_url: "http://dex-ldap-umbrella:32000/auth"
      token_url: "http://dex-ldap-umbrella:32000/token"
      api_url: "http://dex-ldap-umbrella:32000/userinfo"
      allowed_domains: dex-ldap-umbrella aether-roc-gui localhost
      allow_sign_up: true
#      tls_skip_verify_insecure = false
#      tls_client_cert =
#      tls_client_key =
#      tls_client_ca =
  ldap:
    enabled: true
    config: |-
      verbose_logging = true
      [[servers]]
      host = "dex-ldap-umbrella-openldap"
      port = 389
      use_ssl = false
      start_tls = false
      ssl_skip_verify = false
      bind_dn = "cn=admin,dc=opennetworking,dc=org"
      bind_password = 'password'
      search_filter = "(cn=%s)"
      search_base_dns = ["cn=users,dc=opennetworking,dc=org"]

      group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
      group_search_base_dns = ["cn=groups,dc=opennetworking,dc=org"]
      group_search_filter_user_attribute = "uid"

      [servers.attributes]
      member_of = "memberOf"
      email = "mail"
      first_name = "sn"
      surname = "givenName"
      username = "cn"

      [[servers.group_mappings]]
      group_dn = "cn=AetherROCAdmin,cn=groups,dc=opennetworking,dc=org"
      org_role = "Admin"
      org_id = 1

      [[servers.group_mappings]]
      group_dn = "cn=acme,cn=groups,dc=opennetworking,dc=org"
      org_role = "Viewer"
      org_id = 2

      [[servers.group_mappings]]
      group_dn = "cn=starbucks,cn=groups,dc=opennetworking,dc=org"
      org_role = "Viewer"
      org_id = 3

prometheus:
  pushgateway:
    enabled: false
  nodeExporter:
    enabled: false
  kubeStateMetrics:
    enabled: false
  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: sdcore-exporter
          static_configs:
            - targets:
                - sdcore-adapter-v3-exporter:2112

# SD-Core Test Dummy
# proxy_pass has to be added or nginx will not log the $request_body
sdcore-test-dummy:
  service:
    type: ClusterIP
  serverBlock: |-
    log_format client '$remote_addr - $remote_user $request_time $upstream_response_time '
                      '[$time_local] "$request" $status $body_bytes_sent $request_body "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    server {
      listen 0.0.0.0:8080;
      default_type application/json;
      access_log /opt/bitnami/nginx/logs/access.log client;

      # You can provide a special subPath or the root
      location = /v1/config {
        root /;
        proxy_pass http://127.0.0.1:8080/post_dummy;
      }
      location = /v1/config/policies {
        root /;
        proxy_pass http://127.0.0.1:8080/post_dummy;
      }
      location = /v1/config/imsis {
        root /;
        proxy_pass http://127.0.0.1:8080/post_dummy;
      }
      location = /post_dummy {
        # turn off logging here to avoid double logging
        access_log off;
        return 200;
      }
      error_page  405     =200 $uri;
    }

# ONOS-CONFIG
onos-config:
  store:
    consensus:
      enabled: false
  # Deprecated: use 'store' instead
  storage:
    controller: ""
    consensus:
      enabled: false
  models:
    aether:
      v2_1:
        enabled: true
      v2_2:
        enabled: false
      v3:
        enabled: true
  plugin:
    compiler:
      target: ""
  openpolicyagent:
    enabled: true
    rego:
      aether_3_0_0.rego: |-
          # SPDX-FileCopyrightText: 2021-present Open Networking Foundation <info@opennetworking.org>
          #
          # SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

          package aether_3_0_0

          echo[config] {
            config := input
          }

          allowed[config] {
            ap_list := ap_lists # refer to rule below
            application := applications
            connectivity_service := connectivityservices
            device_group := devicegroups
            enterprise := enterprises
            ip_domain := ip_domains
            network := networks
            site := sites
            template := templates
            traffic_class := trafficclasses
            upf := upfs
            vcs := vcss
            config := {
              "ap-list": {
                "ap-list": [
                    ap_list
                ]
              },
              "application": {
                "application": [
                    application
                ]
              },
              "connectivity-service": {
                "connectivity-service": [
                    connectivity_service
                ]
              },
              "device-group": {
                "device-group": [
                    device_group
                ]
              },
              "enterprise": {
                "enterprise": [
                    enterprise
                ]
              },
              "ip-domain": {
                "ip-domain": [
                    ip_domain
                ]
              },
              "network": {
                "network": [
                    network
                ]
              },
              "site": {
                "site": [
                    site
                ]
              },
              "template": {
                "template": [
                    template
                ]
              },
              "traffic_class": {
                "traffic_class": {
                                   traffic_class
                }
              },
              "upf": {
                "upf": [
                    upf
                ]
              },
              "vcs": {
                "vcs": [
                    vcs
                ]
              }
            }
          }

          ap_lists[ap_list] {
            ap_list := input.ap_list.ap_list[_]
            ["AetherROCAdmin", ap_list.enterprise][_] == input.groups[i]
          }

          applications[application] {
            application := input.application.application[_]
            ["AetherROCAdmin", application.enterprise][_] == input.groups[i]
          }

          connectivityservices[connectivity_service] {
            connectivity_service := input.connectivity_service.connectivity_service[_]
          }

          devicegroups[device_group] {
            device_group := input.device_group.device_group[_]
            site := sites
            device_group.site == site[_].id # allow only the device_groups of a known site
          }

          enterprises[enterprise] {
            enterprise := input.enterprise.enterprise[_]
            ["AetherROCAdmin", enterprise.id][_] == input.groups[i]
          }

          ip_domains[ip_domain] {
            ip_domain := input.ip_domain.ip_domain[_]
          }

          networks[network] {
            network := input.network.network[_]
            ["AetherROCAdmin", network.enterprise][_] == input.groups[i]
          }

          sites[site] {
            site := input.site.site[_]
            ["AetherROCAdmin", site.enterprise][_] == input.groups[i]
          }

          templates[template] {
            template := input.template.template[_]
          }

          trafficclasses[traffic_class] {
            traffic_class := input.traffic_class.traffic_class[_]
          }

          upfs[upf] {
            upf := input.upf.upf[_]
            ["AetherROCAdmin", upf.enterprise][_] == input.groups[i]
          }

          vcss[vcs] {
            vcs := input.vcs.vcs[i]
            application := applications
            vcs.application[_].application == application[_].id
          }

          can_update_enterprise = true {
            update_enterprise := input.updates.enterprise.enterprise[_]
            ["AetherROCAdmin", update_enterprise.id][_] == input.groups[i]
          }
      aether_2_1_0.rego: |-
          # SPDX-FileCopyrightText: 2021-present Open Networking Foundation <info@opennetworking.org>
          #
          # SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

          package aether_2_1_0

          echo[config] {
            config := input
          }

          allowed[config] {
            access_profile := access_profiles # refer to rule below
            subscriber := subscribers
            apn_profile := apn_profiles
            connectivity_service := connectivityservices
            enterprise := enterprises
            qos_profile := qos_profiles
            security_profile := security_profiles
            service_profile := service_profiles
            service_group := service_groups
            service_policy := service_policies
            service_rule := service_rules
            up_profile := up_profiles
            config := {
              "access_profile": {
                "access_profile": [
                    access_profile
                ]
              },
              "subscriber": {
                "ue": [
                    subscriber
                ]
              },
              "apn_profile": {
                "apn_profile": [
                    apn_profile
                ]
              },
              "connectivity-service": {
                "connectivity-service": [
                    connectivity_service
                ]
              },
              "enterprise": {
                "enterprise": [
                    enterprise
                ]
              },
              "qos_profile": {
                "qos_profile": [
                    qos_profile
                ]
              },
              "security_profile": {
                "security_profile": [
                    security_profile
                ]
              },
              "service_profile": {
                "service_profile": [
                    service_profile
                ]
              },
              "service_group": {
                "service_group": [
                    service_group
                ]
              },
              "service_policy": {
                "service_policy": [
                    service_policy
                ]
              },
              "service_rule": {
                "service_rule": [
                    service_rule
                ]
              },
              "up_profile": {
                "up_profile": [
                    up_profile
                ]
              },
            }
          }

          access_profiles[access_profile] {
            access_profile := input.access_profile.access_profile[_]
          }

          subscribers[subscriber] {
            subscriber := input.subscriber.ue[_]
          }

          apn_profiles[apn_profile] {
            apn_profile := input.apn_profile.apn_profile[_]
          }

          connectivityservices[connectivity_service] {
            enterprise := input.enterprise.enterprise[_]
            enterprise_cs := enterprise.connectivity_service[_]
            connectivity_service := input.connectivity_service.connectivity_service[_]
            ["AetherROCAdmin", enterprise.id][_] == input.groups[i]
            enterprise_cs.connectivity_service == connectivity_service.id
          }

          enterprises[enterprise] {
            enterprise := input.enterprise.enterprise[_]
            ["AetherROCAdmin", enterprise.id][_] == input.groups[_]
          }

          qos_profiles[qos_profile] {
            qos_profile := input.qos_profile.qos_profile[_]
          }
          security_profiles[security_profile] {
            security_profile := input.security_profile.security_profile[_]
          }
          service_profiles[service_profile] {
            service_profile := input.service_profile.service_profile[_]
          }
          service_groups[service_group] {
            service_group := input.service_group.service_group[_]
          }
          service_policies[service_policy] {
            service_policy := input.service_policy.service_policy[_]
          }
          service_rules[service_rule] {
            service_rule := input.service_rule.service_rule[_]
          }
          up_profiles[up_profile] {
            up_profile := input.up_profile.up_profile[_]
          }

      testdevice-1.0.0.rego: |-
        package testdevice_1_0_0

        countlist2a[numelems] {
            numelems := count(input.cont1a.list2a)
        }

        countlist4[numelems] {
            numelems := count(input.cont1a.list4)
        }

        allowed[config] {
            list2a := input.cont1a.list2a[_]
            list4 := input.cont1a.list4[_]
            config := {
                "cont1a": {
                    "list2a": [
                        list2a
                    ],
                    "list4": [
                        list4
                    ]
                }
            }
            list2a.name == list4.id
        }
