# SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: LicenseRef-ONF-Member-1.0

# Default values for all Aether Helm charts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  fullnameOverride: "onos"
  nameOverride: ""
  storage:
    controller: "atomix-controller.kube-system.svc.cluster.local:5679"
    consensus:
      enabled: true
      name: ""
      type: raft
      image: ""
      imagePullPolicy: IfNotPresent
      partitions: 1
      replicas: 1
      clusters: 1
      class: ""
      size: 1Gi

import:
  onos-topo:
    enabled: true
  onos-config:
    enabled: true
  onos-gui:
    enabled: true
  onos-cli:
    enabled: true
  aether-roc-api:
    enabled: true
  aether-roc-gui:
    enabled: true
  sdcore-adapter:
    enabled: true
  sdcore-test-dummy:
    enabled: true

# ONOS-TOPO
onos-topo:
  storage:
    consensus:
      enabled: false

# ONOS-CONFIG
onos-config:
  storage:
    consensus:
      enabled: false
  models:
    aether:
      v1:
        enabled: false
      v2:
        enabled: true
      v2_1:
        enabled: true
      v2_2:
        enabled: true

# ONOS-GUI
onos-gui: {}

# ONOS-CLI
onos-cli:
  postInstall:
    placeholder: true
    topo: spgw-1-topo-entities.yaml

# Aether ROC API
aether-roc-api: {}

# Aether ROC GUI
aether-roc-gui: {}

# SD-Core Adapter
sdcore-adapter:
  nameOverride: sdcore-adapter
  fullnameOverride: sdcore-adapter
  prometheusEnabled: false

# SD-Core Test Dummy
# proxy_pass has to be added or nginx will not log the $request_body
sdcore-test-dummy:
  serviceType: NodePort
  serverBlock: |-
    log_format client '$remote_addr - $remote_user $request_time $upstream_response_time '
                      '[$time_local] "$request" $status $body_bytes_sent $request_body "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    server {
      listen 0.0.0.0:8080;
      default_type application/json;
      access_log /opt/bitnami/nginx/logs/access.log client;

      # You can provide a special subPath or the root
      location = /v1/config {
        root /;
        proxy_pass http://127.0.0.1:8080/post_dummy;
      }
      location = /v1/config/policies {
        root /;
        proxy_pass http://127.0.0.1:8080/post_dummy;
      }
      location = /v1/config/imsis {
        root /;
        proxy_pass http://127.0.0.1:8080/post_dummy;
      }
      location = /post_dummy {
        # turn off logging here to avoid double logging
        access_log off;
        return 200;
      }
      error_page  405     =200 $uri;
    }
